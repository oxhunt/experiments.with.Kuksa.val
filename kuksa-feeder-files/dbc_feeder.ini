# Token file for authorization.
# Default behavior differ between servers
# For KUKSA.val Databroker the KUKSA.val default token not included in packages and containers
# If you run your Databroker so it require authentication you must specify token
# The example below works if you have cloned kuksa-databroker in parallel to kuksa-can-provider
# token=../kuksa-databroker/jwt/provide-all.token
# The example below works if you have cloned kuksa-common in parallel to kuksa-can-provider
# token=../kuksa-common/jwt/provide-all.token
# For KUKSA.val Server you can specify token like below
# token=../kuksa.val/kuksa_certificates/jwt/super-admin.json.token

# Definitions on what directions to support.
# Default is from CAN to KUKSA (dbc2val) only.
# Note however that a mapping also is required, so if you do not have any val2dbc mapping, then the val2dbc config
# does not matter
[general]
dbc2val = True
# Note that to enable val2dbc you must use SocketCAN, you cannot use candumpfile
val2dbc = False

server_type = kuksa_databroker
ip = localhost
port = 55555
j1939 = False
# tls = True
# root_ca_path = /path/to/CA.pem
# tls_server_name = localhost
# token = /jwt/token.jwt
# mapping = mapping/vss_4.0/vss_dbc.json

[can]
candumpfile = /kuksa-feeder-files/candump.log
dbcfile = /kuksa-feeder-files/Model3CAN.dbc
port = vcan0

